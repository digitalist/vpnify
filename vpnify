#!/bin/bash
# Escalate priveleges
if [ $(id -un) != 'root' ]; then
    exec sudo -E -- $0 $*
fi

# Cleanup function
clean() {
    # Find all pids using this NS
    PIDS=$(find -L /proc/[1-9]*/task/*/ns/net -samefile /run/netns/"$NETNS" 2> /dev/null)

    if [ "$PIDS" == "" ]; then
        # Remove NS and drop iptables rule
        ip netns del $NETNS
        iptables -t nat -D POSTROUTING -s 10.1.$NNUM.0/24 -o $INTERFACE\
            -m comment --comment "for $NETNS" -j MASQUERADE 2> /dev/null
    fi

    PIDS=$(find -L /proc/[1-9]*/task/*/ns/mnt -samefile /run/mntns/"$NETNS" 2> /dev/null)

    if [ "$PIDS" == "" ]; then
        # Remove mount namespace if it was created
        if [ -e "/run/mntns/$NETNS" ]; then
            umount /run/mntns/$NETNS
            rm /run/mntns/$NETNS
        fi
    fi

    # Execute custom user (post) hooks
    for hook in $CUSTOM_PATH/post.d/*; do
        [ -x "$hook" ] && "$hook"
    done
}

# Run cleanup on exit
trap 'clean;' 0

# Name of network namespace
NETNS=$(basename $0)

# Check if this namespace exists already
EXISTING=$(ip netns show | cut -d' ' -f1 | grep "^$NETNS\$")

# Save firewall rules
IPTABLES=$(iptables-save)

# Find default interface
INTERFACE=$(ip route | grep default | sed 's/.*dev \(.*\)/\1/' | cut -f1 -d' ')

# Network NS argument for nsenter
NETWORK_NS="-n/run/netns/$NETNS"

# Customization path
if [ $NETNS == "vpnify" ]; then
    CUSTOM_PATH="/etc/vpnify"
else
    CUSTOM_PATH="/etc/vpnify/$NETNS"
fi

# Create mount namespace for /etc/resolv.conf and /etc/hosts if needed
if  [ -e "$CUSTOM_PATH/resolv.conf" ] || [ -e "$CUSTOM_PATH/hosts" ] ; then
    MOUNT_NS="--mount=/run/mntns/$NETNS"

    if [ ! -e "/run/mntns/$NETNS" ]; then
        mkdir -p /run/mntns
    fi

    # Check if it's already mounted
    mountpoint /run/mntns > /dev/null 2>&1

    if [ $? != 0 ]; then
        mount -t tmpfs tmpfs /run/mntns
        # Fix for systemd based systems
        mount --make-rprivate /run/mntns
    fi

    # This ddoesn't work with old mountpoint (it doesn't recognise
    # single file mounts)
    # mountpoint /run/mntns/$NETNS > /dev/null 2>&1
    # if [ $? != 0 ]; then

    if [ ! -e "/run/mntns/$NETNS" ]; then
        touch /run/mntns/$NETNS

        # This doesn't work with older unshare
        # unshare $MOUNT_NS echo -n

        # Ugly workaround for old unshare versions
        unshare -m sleep 0.1 &

        # Avoids a race condition
        sleep 0.01

        # Bind mount a namespace to make it permanent
        mount --bind /proc/$!/task/$!/ns/mnt /run/mntns/$NETNS
        mount --make-shared /run/mntns/$NETNS

        # Kill backround process
        kill $!
        wait $! 2>/dev/null

        [ -e "$CUSTOM_PATH/hosts" ] && nsenter $MOUNT_NS mount --bind \
            $CUSTOM_PATH/hosts /etc/hosts
        [ -e "$CUSTOM_PATH/resolv.conf" ] && nsenter $MOUNT_NS mount \
            --bind $CUSTOM_PATH/resolv.conf /etc/resolv.conf
    fi
fi

if [ "$EXISTING" != "" ]; then
    # Get the existing subnet number
    NNUM=$(grep "for $NETNS" <<< $IPTABLES | head -n1 | cut -d' ' -f4 | cut -d'.' -f3)
else
    # Names of veth interfaces
    VETH0="${NETNS}_veth0"
    VETH1="${NETNS}_veth1"

    # Find an unused subnet starting from 10.1.0.0/24 to 10.1.255.0/24
    NNUM=0
    while [ $NNUM -le 255 ]; do
        COUNT=$(grep -c "10\.1\.$NNUM\.0/24" <<< $IPTABLES)

        if [ $COUNT == 0 ]; then
            break
        fi

        NNUM=$(($NNUM + 1))
    done

    # No free subnets - probably something's wrong with iptables
    [ $NNUM == 256 ] && exit 1

    # Create network namespace
    ip netns add $NETNS
    ip netns exec $NETNS ip link set dev lo up

    # Create veth pair
    ip link delete $VETH0 2> /dev/null
    ip link add $VETH0 type veth peer name $VETH1
    ip link set $VETH1 netns $NETNS

    # Setup the pair
    ip netns exec $NETNS ip addr add 10.1.$NNUM.1/24 dev $VETH1
    ip addr add 10.1.$NNUM.2/24 dev $VETH0
    ip netns exec $NETNS ip link set $VETH1 up
    ip link set $VETH0 up

    # Add default route inside NS
    ip netns exec $NETNS ip route add default via 10.1.$NNUM.2 dev $VETH1

    # Enable routing
    echo 1 > /proc/sys/net/ipv4/ip_forward

    # Create nat rule
    iptables -t nat -A POSTROUTING -s 10.1.$NNUM.0/24 -o $INTERFACE\
        -m comment --comment "for $NETNS" -j MASQUERADE
fi

# Execute custom user hooks
for hook in $CUSTOM_PATH/pre.d/*; do
    [ -x "$hook" ] && "$hook"
done

# Workaround pwd bug
if [ "$*" == "" ]; then
    COMMAND="cd $PWD; $SHELL"
else
    COMMAND="cd $PWD; $*"
fi

# Use sudo to drop priveleges inside the namespace
nsenter $MOUNT_NS $NETWORK_NS sudo -Eu $SUDO_USER -- $SHELL -c "$COMMAND"
